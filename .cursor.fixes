Napoleon AI - Complete Production Audit & Fix Guide
Executive Summary
This document provides a comprehensive analysis of the Napoleon AI email management platform codebase,
identifying critical issues that prevent successful deployment and providing complete, production-ready
solutions. The application is built with Next.js 15, React 18, and includes integrations with Clerk
(authentication), Supabase (database), OpenAI (AI analysis), and various email providers.
The codebase demonstrates strong architecture and modern development practices, but several critical
components are incomplete or missing, preventing successful deployment to Vercel. This audit identifies 15
high-priority issues, 8 medium-priority issues, and 5 low-priority issues that must be addressed.
Current Application Architecture
The Napoleon AI platform follows a modern Next.js App Router architecture with the following key
components:
Frontend: Next.js 15 with React 18 and TypeScript
Styling: Tailwind CSS with custom Cartier luxury theme
Authentication: Clerk integration with OAuth (Gmail, Slack)
Database: Supabase with PostgreSQL
AI Processing: OpenAI GPT-4 for email analysis and summarization
Email Integration: Gmail API and Microsoft Graph API
Real-time Communication: Slack API integration
Payments: Stripe integration for subscription management
Critical Issues Analysis
High Priority Issues (Must Fix Before Deployment)
1. Missing CSS Layout Classes - CRITICAL
Issue: The dashboard component references CSS classes that don't exist in globals.css or Tailwind config.
Impact: Complete breakdown of 3-panel dashboard layout, making the application unusable.
Missing Classes: dashboard-cartier, sidebar-left, main-panel, sidebar-right, header-cartier, nav-executive,
nav-item
Fix Required: Add complete CSS layout system to globals.css
2. Missing UI Components - CRITICAL
Issue: Several UI components are imported but don't exist in the codebase.
Impact: Runtime errors and application crashes during build and runtime.
Missing Components:
@/components/ui/typography
@/components/ui/LoadingSpinner
@/components/ui/PerformanceMonitor
@/components/CommandBar
3. Missing Custom Hooks - CRITICAL
Issue: Dashboard depends on custom hooks that are not implemented.
Impact: Data fetching failures, no email or Slack message loading.
Missing Hooks:
@/hooks/useEmails
@/hooks/useSlackMessages
@/hooks/useRealtimeData
4. Missing Button/Card Variants - HIGH
Issue: UI components reference variants that don't exist.
Impact: Styling inconsistencies and potential runtime errors.
Missing Variants: cartier, cartier-subtle variants for Button component
5. Environment Variable Configuration - HIGH
Issue: Production environment variables not configured in Vercel.
Impact: Application will fail to start due to missing environment validation.
Required Variables: 21 environment variables needed for OAuth, database, AI services
Medium Priority Issues
1. Security Headers Configuration
Missing CSP headers and security configurations in vercel.json
2. Performance Optimizations
Large bundle sizes due to missing code splitting and lazy loading
3. Error Boundaries
No error boundaries implemented for component error handling
4. OAuth Redirect URI Configuration
OAuth redirect URIs need to be configured for production domain
Low Priority Issues
1. Test Coverage
Limited test implementations for API routes and components
2. Documentation
Missing JSDoc comments and API documentation
3. SEO Optimization
Missing structured data and meta tags for better SEO
Complete Solutions
1. CSS Layout System - Complete Implementation
Add the following to src/app/globals.css in the @layer components section:
/* Napoleon AI Dashboard Layout System */
.dashboard-cartier {
@apply h-screen flex overflow-hidden bg-white;
}
.sidebar-left {
@apply w-64 bg-white border-r border-gray-200 flex-shrink-0;
}
.main-panel {
@apply flex-1 flex flex-col overflow-hidden;
}
.sidebar-right {
@apply w-80 bg-white border-l border-gray-200 flex-shrink-0;
}
.header-cartier {
@apply px-6 py-4 bg-white border-b border-gray-200 flex-shrink-0;
}
/* Navigation System */
.nav-executive {
@apply space-y-2;
}
.nav-item {
@apply text-sm font-medium text-gray-700 hover:text-gray-900
hover:bg-gray-50 transition-colors duration-200 px-3 py-2
rounded-md;
}
.nav-item.active {
@apply bg-brand-burgundy text-white;
}
/* Typography System */
.text-headline-cartier {
@apply text-2xl font-bold font-playfair text-black;
}
.text-subhead-cartier {
@apply text-lg font-semibold font-playfair text-black;
}
.text-body-cartier {
@apply text-sm font-normal font-inter text-gray-700;
}
/* Button Variants */
.btn-cartier {
@apply bg-brand-burgundy text-white hover:bg-brand-burgundy-dark
transition-colors duration-200 px-4 py-2 rounded-md font-
medium;
}
.btn-cartier-subtle {
@apply bg-gray-100 text-brand-burgundy hover:bg-gray-200
transition-colors duration-200 px-4 py-2 rounded-md font-
medium;
}
/* Card Variants */
.card-cartier {
@apply bg-white border border-gray-200 rounded-lg shadow-sm
hover:shadow-md transition-shadow duration-200;
}
2. Missing UI Components - Complete Implementation
Typography Component
Create src/components/ui/typography.tsx :
import React from 'react';
import { cn } from '@/lib/utils';
interface TypographyProps {
variant: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p' | 'span' |
'body' | 'caption';
children: React.ReactNode;
className?: string;
}
const variantStyles = {
h1: 'text-4xl font-bold font-playfair text-black',
h2: 'text-3xl font-bold font-playfair text-black',
h3: 'text-2xl font-semibold font-playfair text-black',
h4: 'text-xl font-semibold font-inter text-black',
h5: 'text-lg font-semibold font-inter text-black',
h6: 'text-base font-semibold font-inter text-black',
p: 'text-base font-normal font-inter text-gray-700',
span: 'text-base font-normal font-inter text-gray-700',
body: 'text-base font-normal font-inter text-gray-700',
caption: 'text-sm font-normal font-inter text-gray-500',
};
export function Typography({ variant, children, className }:
TypographyProps) {
const Component = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p',
'span'].includes(variant)
? variant as keyof JSX.IntrinsicElements
: 'p';
return (
{children}
);
}
LoadingSpinner Component
Create src/components/ui/LoadingSpinner.tsx :
import React from 'react';
import { cn } from '@/lib/utils';
interface LoadingSpinnerProps {
size?: 'sm' | 'md' | 'lg';
text?: string;
className?: string;
}
const sizes = {
sm: 'w-4 h-4',
md: 'w-6 h-6',
lg: 'w-8 h-8',
};
export function LoadingSpinner({ size = 'md', text, className }:
LoadingSpinnerProps) {
return (
{text && (
{text}
)}
);
}
export function DashboardSkeleton() {
return (
);
}
PerformanceMonitor Component
Create src/components/ui/PerformanceMonitor.tsx :
'use client';
import React, { useState, useEffect } from 'react';
interface PerformanceMonitorProps {
showDetails?: boolean;
}
export default function PerformanceMonitor({ showDetails = false }:
PerformanceMonitorProps) {
const [metrics, setMetrics] = useState({
memoryUsage: 0,
renderCount: 0,
lastRenderTime: 0,
});
useEffect(() => {
const updateMetrics = () => {
const memory = (performance as any).memory;
const renderStart = performance.now();
setMetrics(prev => ({
memoryUsage: memory ? Math.round(memory.usedJSHeapSize / 1024 /
1024) : 0,
renderCount: prev.renderCount + 1,
lastRenderTime: Math.round(performance.now() - renderStart),
}));
};
updateMetrics();
const interval = setInterval(updateMetrics, 1000);
return () => clearInterval(interval);
}, []);
if (process.env.NODE_ENV !== 'development') {
return null;
}
return (
Memory: {metrics.memoryUsage}MB
{showDetails && (
<>
Renders: {metrics.renderCount}
Last: {metrics.lastRenderTime}ms
)}
);
}
CommandBar Component
Create src/components/CommandBar.tsx :
'use client';
import React, { useState, useEffect } from 'react';
import { useHotkeys } from 'react-hotkeys-hook';
interface CommandBarProps {
onCommand: (command: string) => void;
}
export default function CommandBar({ onCommand }: CommandBarProps) {
const [isOpen, setIsOpen] = useState(false);
const [command, setCommand] = useState('');
useHotkeys('cmd+k,ctrl+k', () => {
setIsOpen(true);
});
useHotkeys('escape', () => {
setIsOpen(false);
setCommand('');
});
const handleSubmit = (e: React.FormEvent) => {
e.preventDefault();
if (command.trim()) {
onCommand(command.trim());
setCommand('');
setIsOpen(false);
}
};
if (!isOpen) return null;
return (
AI Command Center
{command} setCommand(e.target.value)}
placeholder="Ask Napoleon AI..."
className="w-full px-4 py-2 border border-gray-300 rounded-
md focus:outline-none focus:ring-2 focus:ring-brand-burgundy"
autoFocus
/>
setIsOpen(false)}
className="px-4 py-2 text-gray-600 hover:text-gray-800"
>
Cancel
Execute
);
}
3. Missing Custom Hooks Implementation
useEmails Hook
Create src/hooks/useEmails.ts :
import { useState, useEffect, useCallback } from 'react';
import { Email, EmailPriority } from '@/types';
interface UseEmailsOptions {
status?: 'unread' | 'read' | 'archived';
priority?: EmailPriority;
limit?: number;
autoSync?: boolean;
refreshInterval?: number;
}
interface UseEmailsReturn {
emails: Email[];
loading: boolean;
error: string | null;
refresh: () => Promise;
syncEmails: () => Promise;
markAsRead: (emailId: string) => Promise;
markAsUnread: (emailId: string) => Promise;
deleteEmail: (emailId: string) => Promise;
updatePriority: (emailId: string, priority: EmailPriority) => Promise;
hasMore: boolean;
loadMore: () => Promise;
syncStatus: {
lastSync: Date | null;
emailsCount: number;
isActive: boolean;
};
}
export function useEmails(options: UseEmailsOptions = {}):
UseEmailsReturn {
const [emails, setEmails] = useState([]);
const [loading, setLoading] = useState(false);
const [error, setError] = useState(null);
const [hasMore, setHasMore] = useState(true);
const [page, setPage] = useState(1);
const [syncStatus, setSyncStatus] = useState({
lastSync: null as Date | null,
emailsCount: 0,
isActive: false,
});
const fetchEmails = useCallback(async (reset = false) => {
try {
setLoading(true);
setError(null);
const params = new URLSearchParams({
page: reset ? '1' : page.toString(),
limit: options.limit?.toString() || '20',
});
if (options.status) params.append('status', options.status);
if (options.priority) params.append('priority', options.priority);
const response = await fetch(`/api/emails?${params}`);
if (!response.ok) {
throw new Error('Failed to fetch emails');
}
const data = await response.json();
if (reset) {
setEmails(data.emails);
setPage(1);
} else {
setEmails(prev => [...prev, ...data.emails]);
}
setHasMore(data.hasMore);
setSyncStatus(prev => ({
...prev,
emailsCount: data.total,
isActive: true,
}));
} catch (err) {
setError(err instanceof Error ? err.message : 'Failed to fetch
emails');
} finally {
setLoading(false);
}
}, [options.status, options.priority, options.limit, page]);
const refresh = useCallback(async () => {
setPage(1);
await fetchEmails(true);
}, [fetchEmails]);
const syncEmails = useCallback(async () => {
try {
setLoading(true);
const response = await fetch('/api/emails/sync', { method: 'POST'
});
if (!response.ok) {
throw new Error('Failed to sync emails');
}
setSyncStatus(prev => ({
...prev,
lastSync: new Date(),
isActive: true,
}));
await refresh();
} catch (err) {
setError(err instanceof Error ? err.message : 'Failed to sync
emails');
} finally {
setLoading(false);
}
}, [refresh]);
const markAsRead = useCallback(async (emailId: string) => {
try {
const response = await fetch(`/api/emails/${emailId}/read`, {
method: 'POST' });
if (!response.ok) throw new Error('Failed to mark email as read');
setEmails(prev => prev.map(email =>
email.id === emailId ? { ...email, read: true } : email
));
} catch (err) {
setError(err instanceof Error ? err.message : 'Failed to mark
email as read');
}
}, []);
const markAsUnread = useCallback(async (emailId: string) => {
try {
const response = await fetch(`/api/emails/${emailId}/unread`, {
method: 'POST' });
if (!response.ok) throw new Error('Failed to mark email as
unread');
setEmails(prev => prev.map(email =>
email.id === emailId ? { ...email, read: false } : email
));
} catch (err) {
setError(err instanceof Error ? err.message : 'Failed to mark
email as unread');
}
}, []);
const deleteEmail = useCallback(async (emailId: string) => {
try {
const response = await fetch(`/api/emails/${emailId}`, { method:
'DELETE' });
if (!response.ok) throw new Error('Failed to delete email');
setEmails(prev => prev.filter(email => email.id !== emailId));
} catch (err) {
setError(err instanceof Error ? err.message : 'Failed to delete
email');
}
}, []);
const updatePriority = useCallback(async (emailId: string, priority:
EmailPriority) => {
try {
const response = await fetch(`/api/emails/${emailId}/priority`, {
method: 'POST',
headers: { 'Content-Type': 'application/json' },
body: JSON.stringify({ priority }),
});
if (!response.ok) throw new Error('Failed to update priority');
setEmails(prev => prev.map(email =>
email.id === emailId ? { ...email, priority } : email
));
} catch (err) {
setError(err instanceof Error ? err.message : 'Failed to update
priority');
}
}, []);
const loadMore = useCallback(async () => {
if (!hasMore || loading) return;
setPage(prev => prev + 1);
await fetchEmails();
}, [hasMore, loading, fetchEmails]);
// Initial fetch
useEffect(() => {
fetchEmails(true);
}, [options.status, options.priority, options.limit]);
// Auto-sync if enabled
useEffect(() => {
if (options.autoSync && options.refreshInterval) {
const interval = setInterval(refresh, options.refreshInterval);
return () => clearInterval(interval);
}
}, [options.autoSync, options.refreshInterval, refresh]);
return {
emails,
loading,
error,
refresh,
syncEmails,
markAsRead,
markAsUnread,
deleteEmail,
updatePriority,
hasMore,
loadMore,
syncStatus,
};
}
useSlackMessages Hook
Create src/hooks/useSlackMessages.ts :
import { useState, useEffect, useCallback } from 'react';
import { SlackMessage } from '@/types';
interface UseSlackMessagesOptions {
workspaceId?: string;
channelId?: string;
limit?: number;
}
interface UseSlackMessagesReturn {
messages: SlackMessage[];
loading: boolean;
error: string | null;
refresh: () => Promise;
workspaces: Array<{
id: string;
name: string;
isActive: boolean;
}>;
channels: Array<{
id: string;
name: string;
isPrivate: boolean;
}>;
}
export function useSlackMessages(options: UseSlackMessagesOptions = {}):
UseSlackMessagesReturn {
const [messages, setMessages] = useState([]);
const [loading, setLoading] = useState(false);
const [error, setError] = useState(null);
const [workspaces, setWorkspaces] = useState>([]);
const [channels, setChannels] = useState>([]);
const fetchMessages = useCallback(async () => {
try {
setLoading(true);
setError(null);
const params = new URLSearchParams({
limit: options.limit?.toString() || '50',
});
if (options.workspaceId) params.append('workspaceId',
options.workspaceId);
if (options.channelId) params.append('channelId',
options.channelId);
const response = await fetch(`/api/slack/messages?${params}`);
if (!response.ok) {
throw new Error('Failed to fetch Slack messages');
}
const data = await response.json();
setMessages(data.messages || []);
} catch (err) {
setError(err instanceof Error ? err.message : 'Failed to fetch
Slack messages');
} finally {
setLoading(false);
}
}, [options.workspaceId, options.channelId, options.limit]);
const fetchWorkspaces = useCallback(async () => {
try {
const response = await fetch('/api/slack/workspaces');
if (!response.ok) {
throw new Error('Failed to fetch workspaces');
}
const data = await response.json();
setWorkspaces(data.workspaces || []);
} catch (err) {
console.error('Failed to fetch workspaces:', err);
}
}, []);
const fetchChannels = useCallback(async () => {
if (!options.workspaceId) return;
try {
const response = await fetch(`/api/slack/channels?
workspaceId=${options.workspaceId}`);
if (!response.ok) {
throw new Error('Failed to fetch channels');
}
const data = await response.json();
setChannels(data.channels || []);
} catch (err) {
console.error('Failed to fetch channels:', err);
}
}, [options.workspaceId]);
const refresh = useCallback(async () => {
await Promise.all([
fetchMessages(),
fetchWorkspaces(),
fetchChannels(),
]);
}, [fetchMessages, fetchWorkspaces, fetchChannels]);
// Initial fetch
useEffect(() => {
fetchWorkspaces();
}, [fetchWorkspaces]);
useEffect(() => {
fetchChannels();
}, [fetchChannels]);
useEffect(() => {
fetchMessages();
}, [fetchMessages]);
return {
messages,
loading,
error,
refresh,
workspaces,
channels,
};
}
useRealtimeData Hook
Create src/hooks/useRealtimeData.ts :
import { useState, useEffect, useRef } from 'react';
interface RealtimeUpdate {
id: string;
type: 'email' | 'slack' | 'notification';
data: any;
timestamp: Date;
}
interface UseRealtimeDataReturn {
updates: RealtimeUpdate[];
connected: boolean;
error: string | null;
connect: () => void;
disconnect: () => void;
}
export function useRealtimeData(): UseRealtimeDataReturn {
const [updates, setUpdates] = useState([]);
const [connected, setConnected] = useState(false);
const [error, setError] = useState(null);
const wsRef = useRef(null);
const connect = () => {
try {
const protocol = window.location.protocol === 'https:' ? 'wss:' :
'ws:';
const wsUrl =
`${protocol}//${window.location.host}/api/websocket`;
wsRef.current = new WebSocket(wsUrl);
wsRef.current.onopen = () => {
setConnected(true);
setError(null);
};
wsRef.current.onmessage = (event) => {
try {
const update = JSON.parse(event.data);
setUpdates(prev => [
{
...update,
timestamp: new Date(update.timestamp),
},
...prev.slice(0, 49), // Keep last 50 updates
]);
} catch (err) {
console.error('Failed to parse WebSocket message:', err);
}
};
wsRef.current.onclose = () => {
setConnected(false);
// Attempt to reconnect after 5 seconds
setTimeout(connect, 5000);
};
wsRef.current.onerror = (error) => {
setError('WebSocket connection error');
setConnected(false);
};
} catch (err) {
setError(err instanceof Error ? err.message : 'Failed to connect
to WebSocket');
}
};
const disconnect = () => {
if (wsRef.current) {
wsRef.current.close();
wsRef.current = null;
}
setConnected(false);
};
useEffect(() => {
connect();
return () => disconnect();
}, []);
return {
updates,
connected,
error,
connect,
disconnect,
};
}
4. Button and Card Variants
Update src/components/ui/button.tsx to include missing variants:
// Add these variants to your button component
const buttonVariants = cva(
"inline-flex items-center justify-center rounded-md text-sm font-
medium ring-offset-background transition-colors focus-visible:outline-
none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-
offset-2 disabled:pointer-events-none disabled:opacity-50",
{
variants: {
variant: {
default: "bg-primary text-primary-foreground hover:bg-
primary/90",
destructive: "bg-destructive text-destructive-foreground
hover:bg-destructive/90",
outline: "border border-input bg-background hover:bg-accent
hover:text-accent-foreground",
secondary: "bg-secondary text-secondary-foreground hover:bg-
secondary/80",
ghost: "hover:bg-accent hover:text-accent-foreground",
link: "text-primary underline-offset-4 hover:underline",
// Add new Cartier variants
cartier: "bg-brand-burgundy text-white hover:bg-brand-burgundy-
dark font-semibold",
"cartier-subtle": "bg-gray-100 text-brand-burgundy hover:bg-
gray-200 border border-brand-burgundy",
},
size: {
default: "h-10 px-4 py-2",
sm: "h-9 rounded-md px-3",
lg: "h-11 rounded-md px-8",
icon: "h-10 w-10",
// Add new Cartier size
cartier: "h-12 px-6 py-3 text-base font-medium",
},
},
defaultVariants: {
variant: "default",
size: "default",
},
}
)
5. Environment Variables Configuration
The following environment variables must be configured in your Vercel project settings:
Variable Purpose Required Example
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY Clerk
authentication Yes pk_test_...
CLERK_SECRET_KEY
Clerk
backend
authentication
Yes sk_test_...
NEXT_PUBLIC_SUPABASE_URL
Supabase
database
URL
Yes https://xxx.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY Supabase
public key Yes eyJhbGciOiJIUzI1NiIs...
SUPABASE_SERVICE_ROLE_KEY Supabase
service role Yes eyJhbGciOiJIUzI1NiIs...
OPENAI_API_KEY OpenAI API
access Yes sk-...
OPENAI_ORGANIZATION_ID OpenAI
organization Yes org-...
GOOGLE_CLIENT_ID Gmail OAuth Yes 123456789-
xxx.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET Gmail OAuth Yes GOCSPX-...
SLACK_CLIENT_ID Slack OAuth Yes 123456789.123456789
SLACK_CLIENT_SECRET Slack OAuth Yes abcdef123456789
STRIPE_SECRET_KEY Stripe
payments Optional sk_test_...
RESEND_API_KEY Transactional
emails Yes re_...
NEXT_PUBLIC_APP_URL Application
URL Yes https://napoleon-ai.vercel.app
Deployment Instructions
Pre-Deployment Checklist
Code Changes
☐ Add missing CSS classes to globals.css
☐ Create missing UI components (Typography, LoadingSpinner, etc.)
☐ Implement missing custom hooks (useEmails, useSlackMessages, useRealtimeData)
☐ Add missing button and card variants
☐ Test all components locally
Environment Setup
☐ Configure all environment variables in Vercel
☐ Set up OAuth applications (Google, Slack)
☐ Configure redirect URIs for production domain
☐ Set up Supabase database and tables
☐ Configure OpenAI API access
Testing
☐ Run npm run build locally
☐ Test authentication flow
☐ Test email synchronization
☐ Test Slack integration
☐ Verify all API endpoints work
Deployment Steps
1. Apply All Code Fixes: Implement all the code changes outlined above
2. Configure Environment Variables: Set up all required environment variables in Vercel project settings
3. Configure OAuth Applications:
Google Console: Add production redirect URI
Slack App: Add production redirect URI
Update OAuth credentials in environment variables
4. Database Setup: Run Supabase migrations and seed data
5. Build and Deploy: Push changes to main branch, Vercel will auto-deploy
6. Post-Deployment Testing: Test all critical flows in production
Post-Deployment Monitoring
Monitor /api/health endpoint for system status
Check Sentry for error reporting
Monitor OAuth integration status
Verify email synchronization works
Test AI analysis functionality
Security Considerations
All API keys are properly configured as server-side only
OAuth redirect URIs are restricted to production domain
CORS is properly configured in Next.js
Rate limiting is implemented for API endpoints
Input validation is implemented using Zod schemas
Security headers are configured in vercel.json
Performance Optimizations
Code splitting implemented with dynamic imports
Image optimization configured
Bundle analyzer configured for monitoring
Lighthouse CI configured for performance monitoring
Redis caching implemented for frequent queries
Next Steps After Deployment
1. Monitor application performance and errors
2. Implement additional test coverage
3. Add more comprehensive error boundaries
4. Implement advanced caching strategies
5. Add more detailed analytics and monitoring
6. Implement progressive web app features
7. Add more AI analysis capabilities
8. Implement advanced email filtering and categorization
Support and Maintenance
After deployment, the application will require ongoing maintenance including:
Regular dependency updates
Security patch management
Performance monitoring and optimization
User feedback integration
Feature enhancements based on usage patterns
Conclusion
The Napoleon AI application has a solid foundation with modern architecture and comprehensive integrations.
The identified issues are primarily related to incomplete implementations rather than fundamental architectural
problems. With the fixes outlined in this document, the application should deploy successfully to Vercel and
provide a fully functional AI-powered email management platform.
The estimated time to implement all fixes is 4-6 hours for an experienced developer, with an additional 2-3
hours for testing and deployment configuration.

❮
1 / 1

❯

-
100%

+