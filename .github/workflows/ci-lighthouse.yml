name: Lighthouse CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Start application
        run: npm start &
        env:
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Wait for application to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 2; done'

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const resultsPath = '.lighthouseci/manifest.json';
              if (fs.existsSync(resultsPath)) {
                const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
                
                let comment = '## üöÄ Lighthouse Performance Results\n\n';
                comment += '| Metric | Score | Status |\n';
                comment += '|--------|-------|--------|\n';
                
                results.forEach(result => {
                  const scores = result.summary;
                  const url = result.url;
                  
                  comment += `| **Performance** | ${Math.round(scores.performance * 100)} | ${scores.performance >= 0.9 ? '‚úÖ' : '‚ùå'} |\n`;
                  comment += `| **Accessibility** | ${Math.round(scores.accessibility * 100)} | ${scores.accessibility >= 0.9 ? '‚úÖ' : '‚ùå'} |\n`;
                  comment += `| **Best Practices** | ${Math.round(scores.bestPractices * 100)} | ${scores.bestPractices >= 0.9 ? '‚úÖ' : '‚ùå'} |\n`;
                  comment += `| **SEO** | ${Math.round(scores.seo * 100)} | ${scores.seo >= 0.9 ? '‚úÖ' : '‚ùå'} |\n`;
                  
                  const allPassed = scores.performance >= 0.9 && 
                                   scores.accessibility >= 0.9 && 
                                   scores.bestPractices >= 0.9 && 
                                   scores.seo >= 0.9;
                  
                  comment += `\n**Overall Status**: ${allPassed ? '‚úÖ PASSED' : '‚ùå FAILED'}\n`;
                  comment += `**URL Tested**: ${url}\n`;
                });
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.error('Error processing Lighthouse results:', error);
            } 